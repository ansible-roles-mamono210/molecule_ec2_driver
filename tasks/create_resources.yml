---
- name: Set AMI id
  block:
    - name: Set facts for variable checking process
      ansible.builtin.set_fact:
        molecule_yaml_image_owner: "{{ item.image_owner }}"
        molecule_yaml_image_name: "{{ item.image_name }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: index

    - name: Get the ec2 ami(s) information by owner and name, if image not set
      amazon.aws.ec2_ami_info:
        owners: "{{ item.image_owner }}"
        filters:
          name: "{{ item.image_name }}"
        profile: "{{ item.profile | default(profile) | default(omit) }}"
      register: ami_info
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: index

    - name: Set AMI id to the latest one by creation date
      ansible.builtin.set_fact:
        molecule_image_id: "{{ item.images | sort(attribute='creation_date', reverse=true) | first | json_query('image_id') }}"
      loop: "{{ ami_info.results }}"
      when: ami_info.results | length > 0

  rescue:
    - name: Set AMI id
      ansible.builtin.set_fact:
        molecule_image_id: "{{ item.image }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: index

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ item.security_group_name }}"
    description: "{{ item.security_group_name }}"
    profile: "{{ item.profile | default(profile) | default(omit) }}"
    rules: "{{ item.security_group_rules | list }}"
    rules_egress: "{{ item.security_group_rules_egress | list }}"
  register: security_group
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index

- name: Delete remote keypair
  amazon.aws.ec2_key:
    name: "{{ item.keypair_name }}"
    profile: "{{ item.profile | default(profile) | default(omit) }}"
    state: absent
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index

- name: Create keypair
  amazon.aws.ec2_key:
    name: "{{ item.keypair_name }}"
    profile: "{{ item.profile | default(profile) | default(omit) }}"
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index
  register: keypair

- name: Persist the keypair
  ansible.builtin.copy:
    dest: "{{ molecule_ephemeral_directory }}/ssh_key"
    content: "{{ keypair.results[0]['key'].private_key }}"
    mode: 0600
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index
  when: keypair.changed

- name: Create molecule instance(s)
  amazon.aws.ec2_instance:
    count: 1
    detailed_monitoring: "{{ detailed_monitoring | default('yes') }}"
    image:
      id: "{{ molecule_image_id }}"
    instance_type: "{{ item.instance_type }}"
    key_name: "{{ item.keypair_name }}"
    name: "{{ item.tag_name }}"
    network:
      assign_public_ip: true
    profile: "{{ item.profile | default(profile) | default(omit) }}"
    security_group: "{{ item.security_group_name }}"
    tags:
      created_by: "{{ item.tag_created_by }}"
      instance: "{{ item.tag_name }}"
    volumes: "{{ item.volumes | list }}"
    vpc_subnet_id: "{{ item.vpc_subnet_id }}"
    wait: yes
  register: server
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index
  async: 7200
  poll: 0

- name: Wait for instance(s) creation to complete
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ server.results }}"

- name: Wait until Ansible could retrieve EC2 instance informations
  ansible.builtin.pause:
    minutes: 1

- name: Retrieve running EC2 instance information
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ item.tag_name }}"
      "instance-state-code": '16'
  register: ec2_info
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index

- name: Set SSH information to variables
  ansible.builtin.set_fact:
    molecule_yaml_ssh_user: "{{ item.ssh_user }}"
    molecule_yaml_ssh_port: "{{ item.ssh_port }}"
    molecule_yaml_keypair_name: "{{ item.keypair_name }}"
    molecule_yaml_keypair_path: "{{ molecule_ephemeral_directory }}/ssh_key"
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index

- name: Populate instance config dict
  ansible.builtin.set_fact:
    instance_conf_dict: {
      'instance': "{{ item.tags.instance }}",
      'address': "{{ item.public_ip_address }}",
      'keypair_name': "{{ molecule_yaml_keypair_name }}",
      'user': "{{ molecule_yaml_ssh_user }}",
      'port': "{{ molecule_yaml_ssh_port }}",
      'identity_file': "{{ molecule_yaml_keypair_path }}",
      'instance_ids': "{{ item.instance_id }}",
      'group_id': "{{ item.security_groups[0].group_id }}", }
  with_items: "{{ ec2_info.results[0]['instances'] }}"
  register: instance_config_dict

- name: Convert instance config dict to a list
  ansible.builtin.set_fact:
    instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

- name: Dump instance config
  ansible.builtin.copy:
    content: "{{ instance_conf | to_json | from_json | to_yaml }}"
    dest: "{{ molecule_instance_config }}"
    mode: 0755

- name: Wait for SSH
  ansible.builtin.wait_for:
    port: "{{ item.port }}"
    host: "{{ item.address }}"
    state: present
    delay: 10
    timeout: 400
  register: connection_results
  until: connection_results is succeeded
  retries: 300
  with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
